---
title: "Research Proposal"
author: "Eungwon Lee"

execute:
  echo: false
  
bibliography: references.bib
---

> **Abstract.**  
>
> **Keywords.** SVAR, monetary policy, credit, deposit

#  The objective, question, and motivation

## Objective

The research objective is to investigate the relationship among monetary policy, banks deposit and credit growth, while considering other important macroeconomic variables in Australia, using a structural vector autoregression model. The overall question to be answered can thus be described as; How does the monetary policy and deposit growth affect the banks' credit growth in Australia?


## Motivation

The reason why the objective question is of interest is that banks' credit plays an important role in the economy as it supports investment for firms, consumption for households, and sometimes causes inflationary pressure. Thus, the effect of monetary policy on credit has been deemed to be an important concern for researchers and central bankers. A channel that explains how monetary policy works through credit is called the credit channel. In the credit channel, changes in monetary policy affect the required reserves of banks, which cause banks to change the quantity of loans they provide (e.g., @bernanke1992federal; Jimenez et al. 2014). However, the effect of changes in reserves has been estimated to be too small to exert a meaningful influence on bank lending (Woodford 2010).

One suggestion to fill this gap is proposed by Dreschler et al. (2017). In the paper, they argue that banks' credit substantially reacts to monetary policy through changes in deposits. According to their estimation, it accounts for the entire transmission of monetary policy through the bank's balance sheet. I incorporate this deposit channel in the SVAR framework to evaluate the effect of monetary policy with deposit change on banks' credit. 


#  Data and their properties

Following Berkelmans (2005), variables are largely divided into two groups: the external and domestic sectors. For the external sector, real commodity prices (such as oil prices) and real U.S. GDP are used. The domestic sector is captured by real Australian GDP, inflation rate, banks' credit, deposit, US exchange rate, and cash rate.

At the moment, I load the related packages for the data work as follows:

```{r}
#| echo: true
#| message: false
library(readrba)
library(readabs)
library(fredr)
library(tseries)
library(ggplot2)
library(cowplot)
library(dplyr)
library(zoo)
library(xts)
library(lubridate)
library(tidyr)
library(tibble)
library(lattice)
library(gridExtra)
library(FinTS)


```


The external sector is included considering Australia's status as a small open economy that heavily relies on foreign economic conditions. Commodity prices are included as they are known to capture the global business cycle that affects the domestic economy, and due to the fact that they usually ensure that the impulse responses does not show a price puzzle. The Index of Commodity Prices Australia (ICP) will be used for commodity prices. ICP is a measure of the average change in prices of Australia's major export commodities over time using price data from a basket of commodities, including minerals, agricultural products, and energy resources. The ICP is a key indicator of Australia's terms of trade. The inclusion of the U.S. GDP is also important as it has been Australia's one of the major trading partners and the largest economy that influence the world economy heavily.

For the domestic sector, real GDP is included to capture the level of domestic economic activity, while the inflation rate is included as the Reserve Bank of Australia (RBA) has adopted an inflation target since 1990, which strongly affects monetary policy. Banks' credit and deposit are key variables in the model as they form contemporaneous relationship with monetary policy. Finally, the cash rate is the primary tool of monetary policy for the RBA, and it is therefore an essential variable to include in the model. 

Quarterly data between Q1 1990 and Q2 2019 was acquired from the Reserve Bank of Australia (RBA) and the Australian Bureau of Statistics (ABS) using the "readrba" and "readabs" packages in R. The data were mostly transformed into logarithmic form, except for exchange rate and cash rate, allowing the coefficients to be interpreted as elasticities. The exchange rate is presented AUD/USD, while the cash rate is presented in percentage.

Unfortunately, I cannot use data prior to Q1 1990 as RBA adopted the cash rate as its primary policy tool in the early 1990s, replacing the "interest rate on 90-day bills" as the target for monetary policy. Additionally, I cannot use data after Q2 2019 due to a break in the credit data at that time.

```{r}
#| echo: false
#| message: false
#| warning: false
#| results: hide

# test

# I would suggest that you merged all the data into one table, such that you can call them easier. Doing this would also enable you to do loops over the variables. I have attached my own merge, which you can use if interested. You could then do ADF, ACF and plot using a loop over the variables in the table! I have included my own code of ADF if interested (I know that the code could be more efficiently written). 

#Merging the series into vector Y
#Y = na.omit(merge(tindp, tcpi, texpec, tlend, thp, tfci))
#colnames(Y)<- c("indu", "cpi", "exp", "lend","hp","fci")

# Code for ADF
#max_lag = 12
#adf_ <- list()
#for (i in 1:6) {
#  adf_result = adf.test(Y[,i], k = max_lag)
#  adf_[[i]] <- adf_result
#}
#head(adf_)

# View the ADF test results
#summary(adf_result)

#adf_table <- data.frame(Test_Statistic = numeric(length(adf_)), 
#                        p_value = numeric(length(adf_)), 
#                        Lags_Used = numeric(length(adf_)))

# Fill in the data frame with the test results
#for (i in 1:length(adf_)) {
#  adf_table[i, "Test_Statistic"] = round(adf_[[i]]$statistic,3)
#  adf_table[i, "p_value"] = round(adf_[[i]]$p.value,3)
#  adf_table[i, "Lags_Used"] = round(adf_[[i]]$parameter,3)
#}
```



Below is how I obtain data.
```{r, warning=FALSE, message=FALSE}
#| echo: true
#| message: false
#| warning: false
#| results: hide

# load data from RBA and FRB
temp_ex_comp          <- readrba::read_rba(series_id = "GRCPAIAD")
                         fredr_set_key("7afc2e18e3cf3585055851ad2f310f53")
temp_ex_usrealgdp     <- fredr(series_id = "GDPC1")

temp_dm_realgdp       <- readrba::read_rba(series_id = "GGDPCVGDP")
temp_dm_price         <- readrba::read_rba(series_id = "GCPIAG")
temp_dm_credit        <- readrba::read_rba(series_id = "DLCACN")
   temp_M3            <- readrba::read_rba(series_id = "DMAM3N")
   temp_currency      <- readrba::read_rba(series_id = "DMACN")
   value              <- temp_M3$value - temp_currency$value
temp_dm_deposit       <- cbind(temp_M3[,1], value, temp_M3[,4])
temp_dm_us_ex_rate    <- readrba::read_rba(series_id = "FXRUSD")
temp_dm_cashrate      <- read_cashrate(type = c("target"))

# change data to quarterly
ex_comp          <- to.quarterly(xts(temp_ex_comp$value, temp_ex_comp$date), OHLC = FALSE)
ex_usrealgdp     <- to.quarterly(xts(temp_ex_usrealgdp$value, temp_ex_usrealgdp$date), OHLC = FALSE)
dm_realgdp       <- to.quarterly(xts(temp_dm_realgdp$value, temp_dm_realgdp$date), OHLC = FALSE)
dm_price         <- to.quarterly(xts(temp_dm_price$value, temp_dm_price$date), OHLC = FALSE)
dm_credit        <- to.quarterly(xts(temp_dm_credit$value, temp_dm_credit$date), OHLC = FALSE)
dm_deposit       <- to.quarterly(xts(temp_dm_deposit$value, temp_dm_deposit$date), OHLC = FALSE)
dm_us_ex_rate    <- to.quarterly(xts(temp_dm_us_ex_rate$value, temp_dm_us_ex_rate$date), OHLC = FALSE)
dm_cashrate      <- to.quarterly(xts(temp_dm_cashrate$value, temp_dm_cashrate$date), OHLC = FALSE) 

# unify date so that I can merge with other data
index(ex_usrealgdp) <- seq(as.Date("1947-03-01"), by = "3 months", length.out = nrow(ex_usrealgdp))
index(dm_realgdp)   <- seq(as.Date("1959-09-01"), by = "3 months", length.out = nrow(dm_realgdp))
index(dm_price)     <- as.yearqtr(index(dm_price))
index(dm_realgdp)   <- as.yearqtr(index(dm_realgdp))
index(ex_usrealgdp) <- as.yearqtr(index(ex_usrealgdp))

# merge original data
merged_data  <- na.omit(merge(ex_comp, ex_usrealgdp, dm_realgdp, dm_price, dm_credit, dm_deposit, dm_us_ex_rate, dm_cashrate))
                           
# transform original data into log
log_merged_data <- log(merged_data)

# merge original and log transformed data for estimation
# dm_us_ex_rate, dm_cashrate are original, others are log transformed.
y           = cbind(log_merged_data[,1],
                    log_merged_data[,2],
                    log_merged_data[,3],
                    log_merged_data[,4],
                    log_merged_data[,8],
                    log_merged_data[,6],
                    merged_data[,5],
                    merged_data[,7]
                  
                    
)



```






Below is how data look like. As we see below, stock and flow variables mostly have upward trend and it disappears when I take difference. Some variables such as GDP and deposit exhibit spark around 2020 as below.

###### Figure 1. Time series of log variables from 1990 Q1 to 2019 Q2 except USD exchange rate and cash rate is not {style="text-align: center;"}


```{r, warning=FALSE, message=FALSE}

#| echo: false
#| message: false
#| warning: false
#| results: hide

# This code is from Thomas Kronholm Moeller

pl_ex_comp = ggplot(data = log_merged_data[,1], aes(x = index(log_merged_data[,1]), y = log_merged_data[,1])) +
  geom_line(color = "black") +
  labs(title = "Commodity Price", x = "Year", y = "Ln Commodity Price") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

pl_ex_usrealgdp = ggplot(data = log_merged_data[,2], aes(x = index(log_merged_data[,2]), y = log_merged_data[,2])) +
  geom_line(color = "black") +
  labs(title = "US Real GDP", x = "Year", y = "Ln US Real GDP") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

pl_dm_realgdp = ggplot(data = log_merged_data[,3], aes(x = index(log_merged_data[,3]), y = log_merged_data[,3])) +
  geom_line(color = "black") +
  labs(title = "Australia Real GDP", x = "Year", y = "Ln Au Real GDP") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

pl_dm_price = ggplot(data = log_merged_data[,4], aes(x = index(log_merged_data[,4]), y = log_merged_data[,4])) +
  geom_line(color = "black") +
  labs(title = "Consumer Price Index", x = "Year", y = "Ln Index") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

pl_dm_credit = ggplot(data = log_merged_data[,5], aes(x = index(log_merged_data[,5]), y = log_merged_data[,5])) +
  geom_line(color = "black") +
  labs(title = "Bank Total Credit", x = "Year", y = "Ln Credit") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

pl_dm_deposit = ggplot(data = log_merged_data[,6], aes(x = index(log_merged_data[,6]), y = log_merged_data[,6])) +
  geom_line(color = "black") +
  labs(title = "Bank Deposit", x = "Year", y = "Ln Deposit") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

pl_dm_us_ex_rate = ggplot(data = merged_data[,7], aes(x = index(merged_data[,7]), y = merged_data[,7])) +
  geom_line(color = "black") +
  labs(title = "US Exchange Rate", x = "Year", y = "AUD/USD") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

pl_dm_cashrate = ggplot(data = merged_data[,8], aes(x = index(merged_data[,8]), y = merged_data[,8])) +
  geom_line(color = "black") +
  labs(title = "Cash Rate", x = "Year", y = "Cash Rate (%)") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()


grid.arrange(pl_ex_comp, pl_ex_usrealgdp, pl_dm_realgdp, pl_dm_price, pl_dm_credit, pl_dm_deposit, pl_dm_us_ex_rate, pl_dm_cashrate, nrow = 3, ncol = 3)

```

# 

Once we take difference between quarters, we observe that the trend disappears from data. At the same time, we see that variances are still quite differenent across time in most of the variables.



###### Figure 2. Time series of log differenced variables from 1990 Q1 to 2019 Q2 {style="text-align: center;"}


```{r, warning=FALSE, message=FALSE}
#| echo: false
#| message: false
#| warning: false
#| results: hide

# This code is from Thomas Kronholm Moeller

# difference quarter on quarter
dff_merged_data <- na.omit(merged_data - lag(merged_data))
dff_log_merged_data <- na.omit(log_merged_data - lag(log_merged_data))


dff_pl_ex_comp = ggplot(data = dff_log_merged_data[,1], aes(x = index(dff_log_merged_data[,1]), y = dff_log_merged_data[,1])) +
  geom_line(color = "black") +
  labs(title = "Commodity Price", x = "Year", y = "Ln Difference") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

dff_pl_ex_usrealgdp = ggplot(data = dff_log_merged_data[,2], aes(x = index(dff_log_merged_data[,2]), y = dff_log_merged_data[,2])) +
  geom_line(color = "black") +
  labs(title = "US Real GDP", x = "Year", y = "Ln Difference") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

dff_pl_dm_realgdp = ggplot(data = dff_log_merged_data[,3], aes(x = index(dff_log_merged_data[,3]), y = dff_log_merged_data[,3])) +
  geom_line(color = "black") +
  labs(title = "Australia Real GDP", x = "Year", y = "Ln Difference") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

dff_pl_dm_price = ggplot(data = dff_log_merged_data[,4], aes(x = index(dff_log_merged_data[,4]), y = dff_log_merged_data[,4])) +
  geom_line(color = "black") +
  labs(title = "Consumer Price Index", x = "Year", y = "Ln Difference") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

dff_pl_dm_credit = ggplot(data = dff_log_merged_data[,5], aes(x = index(dff_log_merged_data[,5]), y = dff_log_merged_data[,5])) +
  geom_line(color = "black") +
  labs(title = "Bank Total Credit", x = "Year", y = "Ln Difference") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

dff_pl_dm_deposit = ggplot(data = dff_log_merged_data[,6], aes(x = index(dff_log_merged_data[,6]), y = dff_log_merged_data[,6])) +
  geom_line(color = "black") +
  labs(title = "Bank Deposit", x = "Year", y = "Ln Difference") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

dff_pl_dm_us_ex_rate = ggplot(data = dff_merged_data[,7], aes(x = index(dff_merged_data[,7]), y = dff_merged_data[,7])) +
  geom_line(color = "black") +
  labs(title = "US Exchange Rate", x = "Year", y = "Difference") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

dff_pl_dm_cashrate = ggplot(data = dff_merged_data[,8], aes(x = index(dff_merged_data[,8]), y = dff_merged_data[,8])) +
  geom_line(color = "black") +
  labs(title = "Cash Rate", x = "Year", y = "Difference (%p)") +
  scale_x_continuous(limits = c(1990, 2019))+
  theme_minimal()

grid.arrange(dff_pl_ex_comp, dff_pl_ex_usrealgdp, dff_pl_dm_realgdp, dff_pl_dm_price, dff_pl_dm_credit, dff_pl_dm_deposit, dff_pl_dm_us_ex_rate, dff_pl_dm_cashrate, nrow = 3, ncol = 3)

```
#

Autocorrelation Function (ACF) plots show the correlation between a time series and its lagged values. Stock variables such as credit and deposit exhibit the most strong correlation in time series while exchange rate and cash rate show relatively weak correlation between periods.

###### Figure 3. Autocorrelation function (ACF) plots (all log term except exchange rate and cash rate) {style="text-align: center;"}


```{r ACF plots, echo = FALSE}

# This code is from Ray Gomez

par(mfrow=c(2,4))
a_ex_comp = acf(log_merged_data[,1], main = "ACF, Commodity Pice", ylab = "Autocorrelation", type = "correlation")
a_ex_usrealgdp = acf(log_merged_data[,2], main = "ACF, US Real GDP", ylab = "Autocorrelation", type = "correlation")
a_dm_realgdp = acf(log_merged_data[,3], main = "ACF, AU Real GDP", ylab = "Autocorrelation", type = "correlation")
a_dm_price = acf(log_merged_data[,4],  main = "ACF, CPI", ylab = "Autocorrelation", type = "correlation")
a_dm_credit = acf(log_merged_data[,5], main = "ACF, Total Credit", ylab = "Autocorrelation", type = "correlation")
a_dm_deposit = acf(log_merged_data[,6], main = "ACF, Total Deposit", ylab = "Autocorrelation", type = "correlation")
a_dm_us_ex_rate = acf(merged_data[,7],  main = "ACF, Exchange Rate", ylab = "Autocorrelation", type = "correlation")
a_dm_cashrate = acf(merged_data[,8],  main = "ACF, Cash Rate", ylab = "Autocorrelation", type = "correlation")
```
#
The Partial Autocorrelation Function (PACF) is the correlation between a time series and a lagged version of itself, controlling for the values of the intermediate lags. The PACF plot shows the partial correlation coefficients between the time series and its lags. These coefficients represent the correlation between the time series and the lagged values of itself, with the effect of the intermediate lags removed. We see that for most of the variables, first lag is an important predictor of the current value of the time series. 

###### Figure 4. Partial Autocorrelation function (PACF) plots {style="text-align: center;"}

```{r PACF plots, echo = FALSE}

# This code is from Ray Gomez

par(mfrow=c(2,4))
pa_ex_comp = pacf(log_merged_data[,1], main = "PACF, Commodity Pice")
pa_ex_usrealgdp = pacf(log_merged_data[,2], main = "PACF, US Real GDP")
pa_dm_realgdp = pacf(log_merged_data[,3], main = "PACF, AU Real GDP")
pa_dm_price = pacf(log_merged_data[,4],  main = "PACF, CPI")
pa_dm_credit = pacf(log_merged_data[,5], main = "PACF, Total Credit")
pa_dm_deposit = pacf(log_merged_data[,6], main = "PACF, Total Deposit")
pa_dm_us_ex_rate = pacf(merged_data[,7],  main = "PACF, Exchange Rate")
pa_dm_cashrate = pacf(merged_data[,8],  main = "PACF, Cash Rate")
```




## Integration order verification

I conduct Augmented Dickey-Fuller test for log transformed variables and original cash rate and exchange rate using the "adf()" function to examines the presence of a unit root in the time series. The results of the test are displayed in the table below. Across all variables except exchange rate, I cannot not reject the null hypothesis of unit root.


```{r ADF test1}
#| echo: false
#| message: false
#| warning: false
#| results: hide

# This code is from Thomas Kronholm Moeller
#ADF test

adf_ <- list()
for (i in 1:8) {
  adf_result = adf.test(y[,i], k = 4)
  adf_[[i]] <- adf_result
}

head(adf_)

# View the ADF test results
summary(adf_result)

adf_table <- data.frame(Test_Statistic = numeric(length(adf_)), 
                        p_value = numeric(length(adf_)), 
                        Lags_Used = numeric(length(adf_)))

# Fill in the data frame with the test results
for (i in 1:length(adf_)) {
  adf_table[i, "Test_Statistic"] = round(adf_[[i]]$statistic,3)
  adf_table[i, "p_value"] = round(adf_[[i]]$p.value,3)
  adf_table[i, "Lags_Used"] = round(adf_[[i]]$parameter,3)
}
```

###### Table 1. Augmented Dickey-Fuller test for log transformed variables except ex_rate and cash rate {style="text-align: center;"}
```{r ADF test1 print}
#| echo: false
#| message: false
#| warning: false


# Print the data frame
rownames(adf_table)<- c("Commodity price", "US real GDP", "AU Real GDP", "CPI","Cash rate","Banks' deposit", "Banks' credit", "USD exchange rate")
colnames(adf_table)<- c("Test statistic", "P-value", "Lags")
print(adf_table)


```

#

Then I conduct Augmented Dickey-Fuller test for differenced log transformed variables and original cash rate and exchange rate using the "adf()" function to examines the presence of a unit root in the differenced time series. The results of the test are displayed in the table below. As we can expect, most of variables except banks' deposit and credit, P-values of the tests are below 5% or 1%, implying the rejection of null hypothesis of unit root.


```{r ADF test2}
#| echo: false
#| message: false
#| warning: false
#| results: hide


# This code is from Thomas Kronholm Moeller

# compute dfferenced variables
dff_y           = cbind(dff_log_merged_data[,1],
                         dff_log_merged_data[,2],
                         dff_log_merged_data[,3],
                         dff_log_merged_data[,4],
                         dff_log_merged_data[,8],
                         dff_log_merged_data[,6],
                         dff_merged_data[,5],
                         dff_merged_data[,7]
                  
                    
)

# ADF test
dff_adf_ <- list()
for (i in 1:8) {
  dff_adf_result = adf.test(dff_y[,i], k = 4)
  dff_adf_[[i]] <- dff_adf_result
}

head(dff_adf_)

# View the ADF test results
summary(dff_adf_result)

dff_adf_table <- data.frame(Test_Statistic = numeric(length(dff_adf_)), 
                        p_value = numeric(length(dff_adf_)), 
                        Lags_Used = numeric(length(dff_adf_)))

# Fill in the data frame with the test results
for (i in 1:length(dff_adf_)) {
  dff_adf_table[i, "Test_Statistic"] = round(dff_adf_[[i]]$statistic,3)
  dff_adf_table[i, "p_value"] = round(dff_adf_[[i]]$p.value,3)
  dff_adf_table[i, "Lags_Used"] = round(dff_adf_[[i]]$parameter,3)
}

```

###### Table 2. Augmented Dickey-Fuller test for quarter on quarter differenced variables {style="text-align: center;"}
```{r ADF test2 print}
#| echo: false
#| message: false
#| warning: false


# Print the data frame
rownames(dff_adf_table)<- c("Commodity price", "US real GDP", "AU Real GDP", "CPI","Cash rate","Banks' deposit", "Banks' credit", "USD exchange rate")
colnames(dff_adf_table)<- c("Test statistic", "P-value", "Lags")
print(dff_adf_table)


```



# The model and hypothesis

## The model

The structural VAR model with $4$ lags is given by

$$
\begin{align}
  B_0y_t &= b_0 + B_1 y_{t-1} + \dots + B_4 y_{t-4} + u_t \\
  u_{t}| Y_{t-1} &\sim {iid} ( 0_N, I_N)
\end{align}
$$
Where $B_0$ is a matrix of contemporaneous relationships, $y_t$ is a vector of endogenous variables, $y_{t-1}$, $\dots$, $y_{t-1}$ are vectors of lags, and $u_t$ is a vector of independent structural shocks.

$y_t$ contains eight variables: commodity prices ($com_t$), the U.S. real GDP ($usgdp_t$), domestic real GDP ($gdp_t$), inflation rate($\pi_t$),  cash rate ($i_t$), banks' deposit($d_t$), banks' credit($c_t$), and USD exchange rate ($ex_t$).

Premultiplying $B_0^{-1}$ to the structural VAR model gives us the reduced form representation as follows:

$$
\begin{align}
  y_t &= \mu_0 + A_1 y_{t-1} + \dots + A_4 y_{t-4} + \epsilon_t \\
  \epsilon_{t}| Y_{t-1} &\sim {iid} ( 0_N, \Sigma)
\end{align}
$$
where $A_i=B_0^{-1}B_i$, $\epsilon_t=B_0^{-1}u_t$, and $\Sigma=$$B_0^{-1}B_0^{-1 \prime}$

Using the reduced form equations, we can estimate $\Sigma$. However $\Sigma$ has $8(8+1)/2=36$ unique elements, which is the number of equations, yet we have $8^2=64$ unknowns in $B_0$. Hence I impose exclusion restrictions on $B_0$ to identify the system.


## Identification


Assumptions for $B_0$ matrix is as follows:

- Since Australian economy is a small open economy, I assume that the domestic variables have no effect on external variables while shocks from the external sector have simultaneous effect on the domestic economy.
- GDP is affected from the external sector but not affected by other domestic variables contemporaneously 
- Inflation is affected from the external sector and GDP but not affected by other domestic variables contemporaneously.
- Cash rate is affected from the external sector, GDP and inflation but not affected by other domestic variables contemporaneously.
- Deposit is affected from the external sector, GDP, inflation, and cash rate but not affected by other domestic variables contemporaneously. I assume that profit maximization motive makes banks to adjust the deposit rate at the same period that RBA adjusts the cash rate. And deposit volume changes accordingly.
- Credit is affected from the external sector, GDP, inflation, cash rate, and deposit but not affected by other domestic variables contemporaneously. Since the deposit is the most stable and major funding source for banks, I assume that banks reduces credit outstanding in response to deposit change.
- The exchange rate is affected from all variables contemporaneously.

Following equation summarizes the contemporaneous relationships among the variables:

$$
B_0y_t =
\begin{bmatrix}
a_{11} & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
a_{21} & a_{22} & 0 & 0 & 0 & 0 & 0 & 0 \\
a_{31} & a_{32} & a_{33} & 0 & 0 & 0 & 0 & 0 \\
a_{41} & a_{42} & a_{43} & a_{44} & 0 & 0 & 0 & 0 \\
a_{51} & a_{52} & a_{53} & a_{54} & a_{55} & 0 & 0 & 0 \\
a_{61} & a_{62} & a_{63} & a_{64} & a_{65} & a_{66} & 0 & 0 \\
a_{71} & a_{72} & a_{73} & a_{74} & a_{75} & a_{76} & a_{77} & 0 \\
a_{81} & a_{82} & a_{83} & a_{84} & a_{85} & a_{86} & a_{87} & a_{88} \\
\end{bmatrix}
\begin{bmatrix}
com_t \\
usgdp_t \\
gdp_t \\
\pi_t \\
i_t \\
deposit_t \\
credit_t \\
ex_t \\
\end{bmatrix}
$$


Note that this assumption and thus order of the variables in $y_t$ is subject to change over the course of the research upon any better identification assumption.

# Hypothesis
I want to estimate how monetary shocks affect credit while controlling for deposits. I expect that credit will be less responsive to monetary policy when deposits are included as an endogenous variable. This expectation is consistent with the deposit channel of monetary policy, where banks' credit is heavily influenced by changes in deposits in response to monetary policy.



# References {.unnumbered}

- Itamar Drechsler, Alexi Savov, and Philipp Schnabl, 2017. ”The Deposits Channel of Monetary
Policy,” The Quarterly Journal of Economics, Oxford University Press, vol. 132(4), pages 1819-1876.

- Kilian, L., & Lütkepohl, H. 2017. "Structural Vector Autoregressive Analysis (Themes in Modern Econometrics)," Cambridge: Cambridge University Press.

- Leon Berkelmans, 2005. "Credit and Monetary Policy: An Australian SVAR," RBA Research Discussion Papers rdp2005-06, Reserve Bank of Australia.


